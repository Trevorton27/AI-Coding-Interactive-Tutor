[
  {
    "id": "html-001",
    "title": "Headings 101",
    "description": "Create a document with one <h1> and two <h2> elements describing a page title and two sections.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Headings 101</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add headings here -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelectorAll('h1').length === 1) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (document.querySelectorAll('h2').length === 2) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\ntry {\n  if (document.querySelector('h1')?.textContent.trim().length > 0) { passed.push(\"a03\"); }\n  else { failed.push(\"a03\"); }\n} catch (e) { failed.push(\"a03\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Headings 101</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <h1>My Web Page</h1>\n<h2>Introduction</h2>\n<h2>Details</h2>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <h1> for the main title and <h2> for subsections."
      },
      {
        "level": 2,
        "text": "You need exactly one h1 and two h2."
      },
      {
        "level": 3,
        "text": "Copy: <h1>My Web Page</h1><h2>Introduction</h2><h2>Details</h2>"
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn headings 101 - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-002",
    "title": "Paragraphs & Line Breaks",
    "description": "Add two paragraphs. The first should contain a manual line break using <br>.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Paragraphs & Line Breaks</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add two paragraphs -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelectorAll('p').length === 2) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (document.querySelectorAll('p')[0]?.innerHTML.includes('<br')) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Paragraphs & Line Breaks</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p>Hello line one<br>and line two.</p>\n<p>This is another paragraph.</p>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <p> for paragraphs."
      },
      {
        "level": 2,
        "text": "Use <br> for a manual line break in the first paragraph."
      },
      {
        "level": 3,
        "text": "Create two <p> elements; add a <br> in the first."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn paragraphs & line breaks - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-003",
    "title": "Links & Targets",
    "description": "Create a link to https://example.com that opens in a new tab and uses rel='noopener'.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Links & Targets</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add a link -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('a[href=\"https://example.com\"]')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (document.querySelector('a[href=\"https://example.com\"]').target === '_blank') { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\ntry {\n  if (document.querySelector('a[href=\"https://example.com\"]').rel.includes('noopener')) { passed.push(\"a03\"); }\n  else { failed.push(\"a03\"); }\n} catch (e) { failed.push(\"a03\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Links & Targets</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <a href=\"https://example.com\" target=\"_blank\" rel=\"noopener\">Visit Example</a>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <a href='...'>."
      },
      {
        "level": 2,
        "text": "To open in new tab, add target='_blank'."
      },
      {
        "level": 3,
        "text": "Also add rel='noopener' for security."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn links & targets - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-004",
    "title": "Images & Alt Text",
    "description": "Insert an image 'cat.jpg' with an alt describing the cat.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Images & Alt Text</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add an image -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('img[src=\"cat.jpg\"]')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (document.querySelector('img[src=\"cat.jpg\"]').getAttribute('alt')?.trim().length > 0) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Images & Alt Text</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <img src=\"cat.jpg\" alt=\"A playful orange cat\">\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <img src='...' alt='...'>."
      },
      {
        "level": 2,
        "text": "Alt text should describe the image content."
      },
      {
        "level": 3,
        "text": "Example: <img src='cat.jpg' alt='A playful orange cat'>"
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn images & alt text - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-005",
    "title": "Unordered Lists",
    "description": "Create a bulleted list with three items: 'One', 'Two', 'Three'.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Unordered Lists</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add an unordered list -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelectorAll('ul li').length === 3) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (Array.from(document.querySelectorAll('ul li')).map(li=>li.textContent.trim()).join(',') === 'One,Two,Three') { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Unordered Lists</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <ul><li>One</li><li>Two</li><li>Three</li></ul>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <ul> with nested <li>."
      },
      {
        "level": 2,
        "text": "Create exactly three items with provided text."
      },
      {
        "level": 3,
        "text": "Copy the list: <ul><li>One</li><li>Two</li><li>Three</li></ul>"
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn unordered lists - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-006",
    "title": "Ordered Lists",
    "description": "Create a numbered list with items 'First', 'Second'.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Ordered Lists</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add an ordered list -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelectorAll('ol li').length === 2) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (Array.from(document.querySelectorAll('ol li')).map(li=>li.textContent.trim()).join(',') === 'First,Second') { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Ordered Lists</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <ol><li>First</li><li>Second</li></ol>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <ol> with <li>."
      },
      {
        "level": 2,
        "text": "Ensure two items only."
      },
      {
        "level": 3,
        "text": "<ol><li>First</li><li>Second</li></ol>"
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn ordered lists - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-007",
    "title": "Description Lists",
    "description": "Create a definition list with term 'HTML' and description 'Markup language'.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Description Lists</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add a description list -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('dl dt') && !!document.querySelector('dl dd')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (document.querySelector('dl dt')?.textContent.trim()==='HTML') { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\ntry {\n  if (document.querySelector('dl dd')?.textContent.trim()==='Markup language') { passed.push(\"a03\"); }\n  else { failed.push(\"a03\"); }\n} catch (e) { failed.push(\"a03\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Description Lists</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <dl><dt>HTML</dt><dd>Markup language</dd></dl>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <dl> with <dt> and <dd>."
      },
      {
        "level": 2,
        "text": "Place 'HTML' in dt and 'Markup language' in dd."
      },
      {
        "level": 3,
        "text": "Copy the example exactly."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn description lists - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-008",
    "title": "Semantic Layout",
    "description": "Add <header>, <nav>, <main>, and <footer> elements.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Semantic Layout</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Build semantic layout -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('header')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (!!document.querySelector('nav')) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\ntry {\n  if (!!document.querySelector('main')) { passed.push(\"a03\"); }\n  else { failed.push(\"a03\"); }\n} catch (e) { failed.push(\"a03\"); }\n\ntry {\n  if (!!document.querySelector('footer')) { passed.push(\"a04\"); }\n  else { failed.push(\"a04\"); }\n} catch (e) { failed.push(\"a04\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Semantic Layout</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <header>Site Header</header>\n<nav>Navigation</nav>\n<main>Main content</main>\n<footer>Footer</footer>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use the semantic tags directly."
      },
      {
        "level": 2,
        "text": "Include all four: header, nav, main, footer."
      },
      {
        "level": 3,
        "text": "Copy the minimal structure in the solution."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn semantic layout - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-009",
    "title": "Figure & Figcaption",
    "description": "Wrap an image inside <figure> with a <figcaption> describing it.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Figure & Figcaption</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add a figure with caption -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('figure img')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (!!document.querySelector('figure figcaption')) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\ntry {\n  if (document.querySelector('figure figcaption')?.textContent.trim().length>0) { passed.push(\"a03\"); }\n  else { failed.push(\"a03\"); }\n} catch (e) { failed.push(\"a03\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Figure & Figcaption</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <figure><img src=\"diagram.png\" alt=\"Architecture diagram\"><figcaption>System architecture diagram</figcaption></figure>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <figure> with nested <img> and <figcaption>."
      },
      {
        "level": 2,
        "text": "Include alt on the image and text in the caption."
      },
      {
        "level": 3,
        "text": "You can use 'diagram.png' and a simple sentence."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn figure & figcaption - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-010",
    "title": "Simple Table",
    "description": "Create a 2x2 table with headers 'A','B' and row '1','2'.",
    "difficulty": 2,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Simple Table</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add a table -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('table thead th')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (document.querySelectorAll('table thead th').length===2) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\ntry {\n  if (Array.from(document.querySelectorAll('table thead th')).map(th=>th.textContent.trim()).join(',')==='A,B') { passed.push(\"a03\"); }\n  else { failed.push(\"a03\"); }\n} catch (e) { failed.push(\"a03\"); }\n\ntry {\n  if (Array.from(document.querySelectorAll('table tbody td')).map(td=>td.textContent.trim()).join(',')==='1,2') { passed.push(\"a04\"); }\n  else { failed.push(\"a04\"); }\n} catch (e) { failed.push(\"a04\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Simple Table</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <table><thead><tr><th>A</th><th>B</th></tr></thead><tbody><tr><td>1</td><td>2</td></tr></tbody></table>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use thead/tbody/ tr/th/td."
      },
      {
        "level": 2,
        "text": "Two headers A,B and one row 1,2."
      },
      {
        "level": 3,
        "text": "Follow the exact skeleton in the prompt."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn simple table - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-011",
    "title": "Form Labels",
    "description": "Create a form with a text input labeled 'Name'. The label should be explicitly associated.",
    "difficulty": 2,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Form Labels</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add form with label -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('form label[for]')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (!!document.querySelector('form input#name')) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\ntry {\n  if (document.querySelector('label[for=\"name\"]')!=null) { passed.push(\"a03\"); }\n  else { failed.push(\"a03\"); }\n} catch (e) { failed.push(\"a03\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Form Labels</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <form><label for=\"name\">Name</label><input id=\"name\" type=\"text\"></form>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <label for=\"id\"> to connect to an input with matching id."
      },
      {
        "level": 2,
        "text": "Input type can be text."
      },
      {
        "level": 3,
        "text": "See example: label+input with id name."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn form labels - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-012",
    "title": "Email Input",
    "description": "Add an email input named 'email' that is required.",
    "difficulty": 2,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Email Input</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add email input -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('input[type=\"email\"][name=\"email\"]')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (document.querySelector('input[type=\"email\"][name=\"email\"]').required === true) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Email Input</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <input type=\"email\" name=\"email\" required>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use type='email' and name='email'."
      },
      {
        "level": 2,
        "text": "Add the required attribute."
      },
      {
        "level": 3,
        "text": "<input type='email' name='email' required>"
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn email input - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-013",
    "title": "Fieldset & Legend",
    "description": "Group two radio inputs under a fieldset with legend 'Size'.",
    "difficulty": 2,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Fieldset & Legend</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add fieldset with legend and radios -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('fieldset legend')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (document.querySelector('fieldset legend')?.textContent.trim()==='Size') { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\ntry {\n  if (document.querySelectorAll('fieldset input[type=\"radio\"]').length===2) { passed.push(\"a03\"); }\n  else { failed.push(\"a03\"); }\n} catch (e) { failed.push(\"a03\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Fieldset & Legend</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <fieldset><legend>Size</legend><label><input type=\"radio\" name=\"size\" value=\"S\"> S</label><label><input type=\"radio\" name=\"size\" value=\"M\"> M</label></fieldset>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <fieldset><legend>..</legend>..</fieldset>."
      },
      {
        "level": 2,
        "text": "Include two radios sharing the same name."
      },
      {
        "level": 3,
        "text": "See example solution."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn fieldset & legend - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-014",
    "title": "Select Menu",
    "description": "Create a select named 'color' with options Red, Green, Blue.",
    "difficulty": 2,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Select Menu</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add select menu -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('select[name=\"color\"]')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (document.querySelectorAll('select[name=\"color\"] option').length===3) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\ntry {\n  if (Array.from(document.querySelectorAll('select[name=\"color\"] option')).map(o=>o.textContent.trim()).join(',')==='Red,Green,Blue') { passed.push(\"a03\"); }\n  else { failed.push(\"a03\"); }\n} catch (e) { failed.push(\"a03\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Select Menu</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <select name=\"color\"><option>Red</option><option>Green</option><option>Blue</option></select>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <select> with nested <option> elements."
      },
      {
        "level": 2,
        "text": "Set name='color' and add three options."
      },
      {
        "level": 3,
        "text": "Copy the three options verbatim."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn select menu - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-015",
    "title": "Textarea",
    "description": "Add a textarea with placeholder 'Your message'.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Textarea</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add textarea -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('textarea[placeholder=\"Your message\"]')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Textarea</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <textarea placeholder=\"Your message\"></textarea>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <textarea> and set placeholder."
      },
      {
        "level": 2,
        "text": "No name required here."
      },
      {
        "level": 3,
        "text": "<textarea placeholder='Your message'></textarea>"
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn textarea - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-016",
    "title": "Buttons & Types",
    "description": "Add two buttons: one type='submit' and one type='button'.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Buttons & Types</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add two buttons -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelectorAll('button').length===2) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (document.querySelector('button[type=\"submit\"]')!=null) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\ntry {\n  if (document.querySelector('button[type=\"button\"]')!=null) { passed.push(\"a03\"); }\n  else { failed.push(\"a03\"); }\n} catch (e) { failed.push(\"a03\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Buttons & Types</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <button type=\"submit\">Send</button><button type=\"button\">Click</button>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use the button element."
      },
      {
        "level": 2,
        "text": "Set types explicitly."
      },
      {
        "level": 3,
        "text": "One submit, one button."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn buttons & types - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-017",
    "title": "Metadata Tags",
    "description": "Add a meta description with content 'Demo page'.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Metadata Tags</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n  <meta name=\"description\" content=\"\">\n</head>\n<body>\n  <!-- Add meta description in head -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelector('meta[name=\"description\"]').getAttribute('content')==='Demo page') { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Metadata Tags</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n  <meta name=\"description\" content=\"Demo page\">\n</head>\n<body>\n  \n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <meta name='description' content='...'> inside <head>."
      },
      {
        "level": 2,
        "text": "Exact content must match."
      },
      {
        "level": 3,
        "text": "Place it after charset is fine."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn metadata tags - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-018",
    "title": "Favicon",
    "description": "Link a favicon 'favicon.ico' using <link rel='icon'>.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Favicon</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n  <!-- favicon here -->\n</head>\n<body>\n  <!-- Add favicon link in head -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelector('link[rel=\"icon\"][href=\"favicon.ico\"]')!=null) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Favicon</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n  <link rel=\"icon\" href=\"favicon.ico\">\n</head>\n<body>\n  \n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <link rel='icon' href='favicon.ico'> in <head>."
      },
      {
        "level": 2,
        "text": "Any position in head is fine."
      },
      {
        "level": 3,
        "text": "Ensure href matches exactly."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn favicon - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-019",
    "title": "Internal Anchors",
    "description": "Create a link that jumps to a section with id='target'. Add the target section.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Internal Anchors</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add internal link and target -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('a[href=\"#target\"]')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (!!document.getElementById('target')) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Internal Anchors</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <a href=\"#target\">Go to target</a>\n<section id=\"target\">Target section</section>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use id on the target element and an <a href='#id'> link."
      },
      {
        "level": 2,
        "text": "Any element can have the id."
      },
      {
        "level": 3,
        "text": "See example in the solution."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn internal anchors - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-020",
    "title": "mailto & tel Links",
    "description": "Add a mail link to 'info@example.com' and a phone link '+123456'.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>mailto & tel Links</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add mailto and tel links -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('a[href=\"mailto:info@example.com\"]')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (!!document.querySelector('a[href=\"tel:+123456\"]')) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>mailto & tel Links</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <a href=\"mailto:info@example.com\">Email</a> <a href=\"tel:+123456\">Call</a>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use href='mailto:...' and href='tel:...'."
      },
      {
        "level": 2,
        "text": "Text is flexible but links must match exactly."
      },
      {
        "level": 3,
        "text": "Add two <a> elements."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn mailto & tel links - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-021",
    "title": "Blockquote & Cite",
    "description": "Add a blockquote with a cite attribute pointing to 'https://quotes.example'.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Blockquote & Cite</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add blockquote -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('blockquote[cite=\"https://quotes.example\"]')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Blockquote & Cite</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <blockquote cite=\"https://quotes.example\">“Simplicity is prerequisite for reliability.”</blockquote>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <blockquote cite='...'>."
      },
      {
        "level": 2,
        "text": "Any quote text is okay."
      },
      {
        "level": 3,
        "text": "Ensure cite URL matches."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn blockquote & cite - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-022",
    "title": "Code & Pre",
    "description": "Show inline code with <code> and a preformatted block with <pre>.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Code & Pre</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add code and pre -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('code')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (!!document.querySelector('pre')) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Code & Pre</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p>Use <code>&lt;section&gt;</code> for sections.</p>\n<pre>const x = 1;\nconsole.log(x)</pre>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <code> for inline snippets and <pre> for blocks."
      },
      {
        "level": 2,
        "text": "You can escape angle brackets with &lt; &gt;."
      },
      {
        "level": 3,
        "text": "Add one of each."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn code & pre - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-023",
    "title": "HTML Entities",
    "description": "Display the characters < and > using entities in a paragraph.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>HTML Entities</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add paragraph showing entities -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelector('p')?.innerHTML.includes('&lt;') && document.querySelector('p')?.innerHTML.includes('&gt;')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>HTML Entities</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p>Use &lt;em&gt; to emphasize &gt; text.</p>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use &lt; and &gt; entities."
      },
      {
        "level": 2,
        "text": "Place them inside a <p>."
      },
      {
        "level": 3,
        "text": "Example provided."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn html entities - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-024",
    "title": "HTML Comments",
    "description": "Add an HTML comment containing the word TODO.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>HTML Comments</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add comment with TODO -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.documentElement.innerHTML.includes('<!--') && document.documentElement.innerHTML.includes('TODO')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>HTML Comments</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- TODO: fill later -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "HTML comments look like <!-- ... -->."
      },
      {
        "level": 2,
        "text": "Include the word TODO."
      },
      {
        "level": 3,
        "text": "Place it anywhere in the body."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn html comments - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-025",
    "title": "Navigation List",
    "description": "Create a nav containing an unordered list with three links.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Navigation List</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add nav with list -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('nav ul')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (document.querySelectorAll('nav ul li a').length===3) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Navigation List</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <nav><ul><li><a href=\"#\">A</a></li><li><a href=\"#\">B</a></li><li><a href=\"#\">C</a></li></ul></nav>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Wrap the list inside <nav>."
      },
      {
        "level": 2,
        "text": "Add three <a> elements."
      },
      {
        "level": 3,
        "text": "Follow the structure nav > ul > li > a"
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn navigation list - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-026",
    "title": "Footer Smallprint",
    "description": "Add a footer with a small element containing '© 2025'.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Footer Smallprint</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add footer smallprint -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelector('footer small')?.textContent.includes('© 2025')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Footer Smallprint</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <footer><small>© 2025</small></footer>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <footer> with nested <small>."
      },
      {
        "level": 2,
        "text": "Include the © symbol and year."
      },
      {
        "level": 3,
        "text": "Place the text exactly as in the example."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn footer smallprint - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-027",
    "title": "Article & Section",
    "description": "Create an article containing a section with a heading.",
    "difficulty": 2,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Article & Section</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add article with section -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('article section h2')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Article & Section</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <article><section><h2>About</h2><p>Text</p></section></article>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Nest <section> inside <article>."
      },
      {
        "level": 2,
        "text": "Add a heading inside the section."
      },
      {
        "level": 3,
        "text": "h2 is fine for the section heading."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn article & section - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-028",
    "title": "Address Element",
    "description": "Use the <address> element to show a contact email link.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Address Element</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add address with email -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('address a[href^=\"mailto:\"]')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Address Element</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <address>Contact: <a href=\"mailto:support@example.com\">support@example.com</a></address>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <address> for contact information."
      },
      {
        "level": 2,
        "text": "Include a mailto link."
      },
      {
        "level": 3,
        "text": "Follow the example."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn address element - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-029",
    "title": "Abbreviation",
    "description": "Use <abbr> for the term 'HTML' with title='HyperText Markup Language'.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Abbreviation</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add abbr -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelector('abbr[title=\"HyperText Markup Language\"]')?.textContent.trim()==='HTML') { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Abbreviation</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p><abbr title=\"HyperText Markup Language\">HTML</abbr> is the standard.</p>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Add the title attribute explaining the abbreviation."
      },
      {
        "level": 2,
        "text": "Text content should be HTML."
      },
      {
        "level": 3,
        "text": "See example."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn abbreviation - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-030",
    "title": "Time Element",
    "description": "Display 'March 1, 2025' using <time datetime='2025-03-01'>.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Time Element</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add time element -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelector('time[datetime=\"2025-03-01\"]')?.textContent.includes('March') || document.querySelector('time[datetime=\"2025-03-01\"]')?.textContent.includes('2025')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Time Element</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p>Event: <time datetime=\"2025-03-01\">March 1, 2025</time></p>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <time> with a machine-readable datetime."
      },
      {
        "level": 2,
        "text": "Human text can say March 1, 2025."
      },
      {
        "level": 3,
        "text": "Put it inside a paragraph."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn time element - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-031",
    "title": "Details & Summary",
    "description": "Create a collapsible details widget with summary 'More info'.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Details & Summary</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add details -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelector('details summary')?.textContent.trim()==='More info') { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Details & Summary</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <details><summary>More info</summary><p>Hidden text</p></details>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <details> with a <summary>."
      },
      {
        "level": 2,
        "text": "Text must match 'More info'."
      },
      {
        "level": 3,
        "text": "Any content inside is fine."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn details & summary - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-032",
    "title": "Progress",
    "description": "Add a progress bar with value 30 of max 100.",
    "difficulty": 2,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Progress</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add progress -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelector('progress[value=\"30\"][max=\"100\"]')!=null) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Progress</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <progress value=\"30\" max=\"100\">30%</progress>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <progress value='..' max='..'>."
      },
      {
        "level": 2,
        "text": "Values must be 30 and 100."
      },
      {
        "level": 3,
        "text": "Include text 30% if you like."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn progress - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-033",
    "title": "Meter",
    "description": "Add a meter with value 0.7 between 0 and 1.",
    "difficulty": 2,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Meter</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add meter -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelector('meter[value=\"0.7\"][min=\"0\"][max=\"1\"]')!=null) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Meter</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <meter min=\"0\" max=\"1\" value=\"0.7\">70%</meter>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <meter> with min, max and value."
      },
      {
        "level": 2,
        "text": "Use 0, 1, and 0.7."
      },
      {
        "level": 3,
        "text": "Any text is fine."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn meter - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-034",
    "title": "Accessible Iframe",
    "description": "Embed an iframe to 'about:blank' with a title 'preview'.",
    "difficulty": 2,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Accessible Iframe</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add iframe -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelector('iframe[title=\"preview\"][src=\"about:blank\"]')!=null) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Accessible Iframe</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <iframe src=\"about:blank\" title=\"preview\"></iframe>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Always add a title to iframes."
      },
      {
        "level": 2,
        "text": "Use about:blank for the src."
      },
      {
        "level": 3,
        "text": "Copy the example."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn accessible iframe - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-035",
    "title": "ARIA Label",
    "description": "Add a search input with aria-label='Search site'.",
    "difficulty": 2,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>ARIA Label</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add aria-labeled input -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelector('input[type=\"search\"][aria-label=\"Search site\"]')!=null) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>ARIA Label</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <input type=\"search\" aria-label=\"Search site\">\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use type='search' and aria-label."
      },
      {
        "level": 2,
        "text": "Text must match exactly."
      },
      {
        "level": 3,
        "text": "Place the input in body."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn aria label - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-036",
    "title": "Data Attributes",
    "description": "Add a div with data-role='card' and text 'Card'.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Data Attributes</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add data-role card -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.querySelector('div[data-role=\"card\"]')?.textContent.trim()==='Card') { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Data Attributes</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div data-role=\"card\">Card</div>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use a data-* attribute."
      },
      {
        "level": 2,
        "text": "Value must be 'card'."
      },
      {
        "level": 3,
        "text": "Text content 'Card'."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn data attributes - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-037",
    "title": "IDs & Classes",
    "description": "Create a div with id='box' and class='panel'.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>IDs & Classes</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add id and class -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.getElementById('box')!=null) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (document.querySelector('#box.panel')!=null) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>IDs & Classes</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id=\"box\" class=\"panel\">Content</div>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use id and class attributes."
      },
      {
        "level": 2,
        "text": "Selectability matters: #box.panel should match."
      },
      {
        "level": 3,
        "text": "Copy the example."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn ids & classes - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-038",
    "title": "Strong & Emphasis",
    "description": "Create a sentence with both <strong> and <em>.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Strong & Emphasis</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add strong + em -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('strong') && !!document.querySelector('em')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Strong & Emphasis</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p>This is <strong>important</strong> and <em>emphasized</em>.</p>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Wrap words in <strong> and <em>."
      },
      {
        "level": 2,
        "text": "Place them inside a sentence."
      },
      {
        "level": 3,
        "text": "See solution."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn strong & emphasis - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-039",
    "title": "Superscript & Subscript",
    "description": "Show H2O with the 2 as subscript and 10^2 with 2 as superscript.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Superscript & Subscript</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add sub and sup -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (document.body.innerHTML.includes('H<sub>2</sub>O')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (document.body.innerHTML.includes('10<sup>2</sup>')) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Superscript & Subscript</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p>Chemistry: H<sub>2</sub>O</p><p>Math: 10<sup>2</sup></p>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <sub> and <sup> around the numbers."
      },
      {
        "level": 2,
        "text": "Include both examples."
      },
      {
        "level": 3,
        "text": "Follow solution markup."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn superscript & subscript - a fundamental web development concept used in modern websites."
  },
  {
    "id": "html-040",
    "title": "Small & Mark",
    "description": "Add a sentence using <mark> to highlight a word and <small> for fine print.",
    "difficulty": 1,
    "category": "html",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Small & Mark</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <!-- Add mark and small -->\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* You can add styles here */\n",
      "script.js": "// No JS required for this HTML challenge\n"
    },
    "tests": [
      {
        "id": "t1",
        "code": "const passed = []; const failed = [];\ntry {\n  if (!!document.querySelector('mark')) { passed.push(\"a01\"); }\n  else { failed.push(\"a01\"); }\n} catch (e) { failed.push(\"a01\"); }\n\ntry {\n  if (!!document.querySelector('small')) { passed.push(\"a02\"); }\n  else { failed.push(\"a02\"); }\n} catch (e) { failed.push(\"a02\"); }\n\nreturn { passedIds: passed, failedIds: failed, passed: failed.length === 0 };",
        "label": "DOM assertions"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Small & Mark</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p>Remember to <mark>save</mark> often.</p><small>Terms apply.</small>\n\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "style.css": "/* Styles optional for solution */\n",
      "script.js": "// Not used\n"
    },
    "hints": [
      {
        "level": 1,
        "text": "Use <mark> to highlight and <small> for fine print."
      },
      {
        "level": 2,
        "text": "Include both elements in the document."
      },
      {
        "level": 3,
        "text": "See example."
      }
    ],
    "alternativeSolutions": [],
    "realWorldContext": "Learn small & mark - a fundamental web development concept used in modern websites."
  },
  {
    "id": "l2-1-normalize-base",
    "title": "Normalize & Base",
    "description": "Welcome to Normalize & Base! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Normalize & Base are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-10-responsive-nav-css-only",
    "title": "Responsive Nav (CSS only)",
    "description": "Welcome to Responsive Nav (CSS only)! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Responsive Nav (CSS only) are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-11-grid-gallery",
    "title": "Grid Gallery",
    "description": "Welcome to Grid Gallery! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "grid",
        "code": "!!document.querySelector('.grid')",
        "label": "Has element: .grid"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Grid Gallery are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-12-media-queries",
    "title": "Media Queries",
    "description": "Welcome to Media Queries! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Media Queries are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-13-sticky-header",
    "title": "Sticky Header",
    "description": "Welcome to Sticky Header! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Sticky Header are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-14-footer-columns",
    "title": "Footer Columns",
    "description": "Welcome to Footer Columns! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Footer Columns are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-15-css-tooltip",
    "title": "CSS Tooltip",
    "description": "Welcome to CSS Tooltip! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like CSS Tooltip are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-16-css-modal-target",
    "title": "CSS Modal (target)",
    "description": "Welcome to CSS Modal (target)! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like CSS Modal (target) are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-17-animations",
    "title": "Animations",
    "description": "Welcome to Animations! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Animations are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-18-transitions",
    "title": "Transitions",
    "description": "Welcome to Transitions! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Transitions are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-19-svg-sprite",
    "title": "SVG Sprite",
    "description": "Welcome to SVG Sprite! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like SVG Sprite are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-2-type-scale",
    "title": "Type Scale",
    "description": "Welcome to Type Scale! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Type Scale are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-20-aspect-ratio",
    "title": "Aspect Ratio",
    "description": "Welcome to Aspect Ratio! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Aspect Ratio are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-21-form-error-states",
    "title": "Form Error States",
    "description": "Welcome to Form Error States! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Form Error States are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-22-visually-hidden-utility",
    "title": "Visually Hidden Utility",
    "description": "Welcome to Visually Hidden Utility! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Visually Hidden Utility are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-23-theme-toggle-vars",
    "title": "Theme Toggle (vars)",
    "description": "Welcome to Theme Toggle (vars)! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Theme Toggle (vars) are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-24-print-styles",
    "title": "Print Styles",
    "description": "Welcome to Print Styles! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Print Styles are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-25-z-index-dropdown",
    "title": "Z-Index Dropdown",
    "description": "Welcome to Z-Index Dropdown! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Z-Index Dropdown are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-26-sticky-sidebar",
    "title": "Sticky Sidebar",
    "description": "Welcome to Sticky Sidebar! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Sticky Sidebar are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-27-image-fit-sizes",
    "title": "Image Fit & Sizes",
    "description": "Welcome to Image Fit & Sizes! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Image Fit & Sizes are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-28-clamp-typography",
    "title": "Clamp Typography",
    "description": "Welcome to Clamp Typography! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Clamp Typography are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-29-grid-form",
    "title": "Grid Form",
    "description": "Welcome to Grid Form! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "grid",
        "code": "!!document.querySelector('.grid')",
        "label": "Has element: .grid"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Grid Form are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-3-css-variables-theme",
    "title": "CSS Variables Theme",
    "description": "Welcome to CSS Variables Theme! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like CSS Variables Theme are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-30-css-accordion-details",
    "title": "CSS Accordion (details)",
    "description": "Welcome to CSS Accordion (details)! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like CSS Accordion (details) are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-31-css-tabs-radio",
    "title": "CSS Tabs (radio)",
    "description": "Welcome to CSS Tabs (radio)! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like CSS Tabs (radio) are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-32-progress-bar",
    "title": "Progress Bar",
    "description": "Welcome to Progress Bar! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Progress Bar are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-33-badges-pills",
    "title": "Badges & Pills",
    "description": "Welcome to Badges & Pills! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Badges & Pills are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-34-table-styles",
    "title": "Table Styles",
    "description": "Welcome to Table Styles! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "table",
        "code": "!!document.querySelector('table thead th')",
        "label": "Has element: table thead th"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Table Styles are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-35-breadcrumb",
    "title": "Breadcrumb",
    "description": "Welcome to Breadcrumb! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Breadcrumb are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-36-toast-css-show-hide",
    "title": "Toast (CSS show/hide)",
    "description": "Welcome to Toast (CSS show/hide)! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Toast (CSS show/hide) are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-37-masonry-like-grid",
    "title": "Masonry-like Grid",
    "description": "Welcome to Masonry-like Grid! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "grid",
        "code": "!!document.querySelector('.grid')",
        "label": "Has element: .grid"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Masonry-like Grid are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-38-button-loading-state",
    "title": "Button Loading State",
    "description": "Welcome to Button Loading State! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Button Loading State are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-39-spacing-system-vars",
    "title": "Spacing System (vars)",
    "description": "Welcome to Spacing System (vars)! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Spacing System (vars) are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-4-flex-header",
    "title": "Flex Header",
    "description": "Welcome to Flex Header! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "header",
        "code": "!!document.querySelector('header nav')",
        "label": "Has element: header nav"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Flex Header are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-40-landing-page-polish",
    "title": "Landing Page Polish",
    "description": "Welcome to Landing Page Polish! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Landing Page Polish are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-5-hero-center",
    "title": "Hero Center",
    "description": "Welcome to Hero Center! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Hero Center are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-6-card-component",
    "title": "Card Component",
    "description": "Welcome to Card Component! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Card Component are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-7-button-variants",
    "title": "Button Variants",
    "description": "Welcome to Button Variants! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "btn",
        "code": "!!document.querySelector('.btn')",
        "label": "Has element: .btn"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Button Variants are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-8-form-layout-grid",
    "title": "Form Layout Grid",
    "description": "Welcome to Form Layout Grid! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "grid",
        "code": "!!document.querySelector('.grid')",
        "label": "Has element: .grid"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Form Layout Grid are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l2-9-accessible-focus",
    "title": "Accessible Focus",
    "description": "Welcome to Accessible Focus! In this challenge, you'll combine HTML structure with CSS styling to create beautiful, functional web layouts. You'll learn how to use CSS properties to control the visual presentation of your HTML elements.\n\nCSS (Cascading Style Sheets) is what makes websites look good. While HTML provides the structure, CSS provides the style. Modern web development relies heavily on CSS for creating responsive, accessible, and visually appealing interfaces.\n\nYour goal is to write both HTML and CSS that work together to achieve the desired layout and appearance. Pay attention to how different CSS properties interact with your HTML structure.",
    "difficulty": 2,
    "category": "html, css",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": ""
    },
    "realWorldContext": "CSS skills like Accessible Focus are crucial in professional web development. Companies hire CSS specialists to create pixel-perfect, responsive designs that work across all devices - from phones to tablets to desktop computers.\n\nLook at any modern website: the navigation bars, card layouts, form designs, and responsive grids are all created with CSS techniques you're learning here. Frameworks like Bootstrap and Tailwind CSS are built on these same fundamental CSS concepts.\n\nIn the job market, CSS skills are highly valued. Whether you're working as a frontend developer, UI engineer, or full-stack developer, you'll use CSS every single day to bring designs to life and create beautiful user interfaces.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Semantic HTML Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "This approach emphasizes semantic HTML and accessibility best practices. It uses proper element choices, ARIA labels where appropriate, and follows modern web standards. Use this approach in production applications."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": ""
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-1-sumstrings-number",
    "title": "sumStrings → number",
    "description": "In this JavaScript challenge, you'll implement sumstrings → number. This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "eval",
        "code": "(function(){ return (window as any).solution('2','3')===5; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in sumStrings → number are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-10-groupby",
    "title": "groupBy",
    "description": "In this JavaScript challenge, you'll implement groupby. This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in groupBy are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-11-stable-sort-by-key",
    "title": "stable sort by key",
    "description": "In this JavaScript challenge, you'll implement stable sort by key. This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in stable sort by key are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-12-flattendepth",
    "title": "flattenDepth",
    "description": "In this JavaScript challenge, you'll implement flattendepth. This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in flattenDepth are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-13-chunk",
    "title": "chunk",
    "description": "In this JavaScript challenge, you'll implement chunk. This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in chunk are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-14-memoize",
    "title": "memoize",
    "description": "In this JavaScript challenge, you'll implement memoize. This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in memoize are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-15-bigint-sum",
    "title": "bigint sum",
    "description": "In this JavaScript challenge, you'll implement bigint sum. This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in bigint sum are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-16-currency-format",
    "title": "currency format (¥)",
    "description": "In this JavaScript challenge, you'll implement currency format (¥). This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in currency format (¥) are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-17-date-helpers-start-end",
    "title": "date helpers (start/end)",
    "description": "In this JavaScript challenge, you'll implement date helpers (start/end). This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in date helpers (start/end) are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-18-validators-email-url",
    "title": "validators (email/url)",
    "description": "In this JavaScript challenge, you'll implement validators (email/url). This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in validators (email/url) are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-19-schema-guard",
    "title": "schema guard",
    "description": "In this JavaScript challenge, you'll implement schema guard. This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in schema guard are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-2-once-fn",
    "title": "once(fn)",
    "description": "In this JavaScript challenge, you'll implement once(fn). This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "eval",
        "code": "(function(){ let c=0; const f=(window as any).solution(()=>c++); f(); f(); return c===1; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in once(fn) are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-20-event-emitter",
    "title": "event emitter",
    "description": "In this JavaScript challenge, you'll implement event emitter. This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in event emitter are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-21-localstorage-wrapper",
    "title": "localStorage wrapper",
    "description": "In this JavaScript challenge, you'll implement localstorage wrapper. This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in localStorage wrapper are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-22-lru-cache-basic",
    "title": "LRU cache (basic)",
    "description": "In this JavaScript challenge, you'll implement lru cache (basic). This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in LRU cache (basic) are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-23-binary-search",
    "title": "binary search",
    "description": "In this JavaScript challenge, you'll implement binary search. This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in binary search are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-24-merge-sort",
    "title": "merge sort",
    "description": "In this JavaScript challenge, you'll implement merge sort. This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in merge sort are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-25-hash-map-simple",
    "title": "hash map (simple)",
    "description": "In this JavaScript challenge, you'll implement hash map (simple). This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in hash map (simple) are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-26-set-union-intersection-diff",
    "title": "set union/intersection/diff",
    "description": "In this JavaScript challenge, you'll implement set union/intersection/diff. This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in set union/intersection/diff are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-27-uuid-v4-simple",
    "title": "uuid v4 (simple)",
    "description": "In this JavaScript challenge, you'll implement uuid v4 (simple). This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in uuid v4 (simple) are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-28-weighted-random",
    "title": "weighted random",
    "description": "In this JavaScript challenge, you'll implement weighted random. This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in weighted random are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-29-calculator-eval-core",
    "title": "calculator eval core",
    "description": "In this JavaScript challenge, you'll implement calculator eval core. This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in calculator eval core are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-3-closurecounter",
    "title": "closureCounter",
    "description": "In this JavaScript challenge, you'll implement closurecounter. This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in closureCounter are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-30-expression-parser-rpn",
    "title": "expression parser RPN",
    "description": "In this JavaScript challenge, you'll implement expression parser rpn. This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in expression parser RPN are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-31-sanitize-form-input",
    "title": "sanitize form input",
    "description": "In this JavaScript challenge, you'll implement sanitize form input. This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in sanitize form input are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-32-number-utils-clamp-round",
    "title": "number utils (clamp/round)",
    "description": "In this JavaScript challenge, you'll implement number utils (clamp/round). This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in number utils (clamp/round) are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-33-promise-sleep-timeout",
    "title": "promise sleep/timeout",
    "description": "In this JavaScript challenge, you'll implement promise sleep/timeout. This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in promise sleep/timeout are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-34-retry-with-backoff",
    "title": "retry with backoff",
    "description": "In this JavaScript challenge, you'll implement retry with backoff. This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in retry with backoff are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-35-async-queue-k",
    "title": "async queue (k)",
    "description": "In this JavaScript challenge, you'll implement async queue (k). This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in async queue (k) are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-36-pub-sub",
    "title": "pub/sub",
    "description": "In this JavaScript challenge, you'll implement pub/sub. This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in pub/sub are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-37-finite-state-machine-calc",
    "title": "finite state machine (calc)",
    "description": "In this JavaScript challenge, you'll implement finite state machine (calc). This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in finite state machine (calc) are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-38-sum-amounts-helper",
    "title": "sum amounts helper",
    "description": "In this JavaScript challenge, you'll implement sum amounts helper. This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in sum amounts helper are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-39-crud-service-memory",
    "title": "CRUD service (memory)",
    "description": "In this JavaScript challenge, you'll implement crud service (memory). This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "eval",
        "code": "(function(){ const s=(window as any).solution(); const a=s.create({id:1}); return typeof s.read==='function' && a; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in CRUD service (memory) are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-4-array-map-filter-reduce",
    "title": "array map/filter/reduce",
    "description": "In this JavaScript challenge, you'll implement array map/filter/reduce. This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in array map/filter/reduce are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-40-totals-helper-by-category",
    "title": "totals helper by category",
    "description": "In this JavaScript challenge, you'll implement totals helper by category. This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in totals helper by category are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-5-clone-shallow",
    "title": "clone (shallow)",
    "description": "In this JavaScript challenge, you'll implement clone (shallow). This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in clone (shallow) are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-6-debounce",
    "title": "debounce",
    "description": "In this JavaScript challenge, you'll implement debounce. This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in debounce are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-7-throttle",
    "title": "throttle",
    "description": "In this JavaScript challenge, you'll implement throttle. This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in throttle are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-8-pipe-compose",
    "title": "pipe/compose",
    "description": "In this JavaScript challenge, you'll implement pipe/compose. This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in pipe/compose are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l3-9-uniqby",
    "title": "uniqBy",
    "description": "In this JavaScript challenge, you'll implement uniqby. This is where you'll write actual programming logic, working with data, functions, and algorithms. JavaScript is what makes web pages interactive and dynamic.\n\nJavaScript is the programming language of the web. Every interactive element you see online - from dropdown menus to real-time updates - is powered by JavaScript. Understanding these core programming concepts will help you build sophisticated web applications.\n\nYou'll write JavaScript code that passes the test requirements. Focus on writing clean, understandable code. Think about edge cases and how your function should behave with different inputs.",
    "difficulty": 3,
    "category": "js",
    "scaffold": {
      "index.html": "",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "tests": [
      {
        "id": "exists",
        "code": "(function(){ return typeof (window as any).solution==='function'; })()",
        "label": "JS evaluation passes"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "",
      "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
    },
    "realWorldContext": "The JavaScript concepts in uniqBy are fundamental to professional software development. These patterns and techniques are used in every major JavaScript application, from React and Vue apps to Node.js backends.\n\nPopular websites like Netflix use these exact programming patterns to manage data, handle user interactions, and optimize performance. Understanding these concepts opens doors to frameworks like React, Angular, and Vue, which all build on these fundamentals.\n\nJavaScript is the most popular programming language in the world. With these skills, you can build web applications, mobile apps (React Native), desktop applications (Electron), and even server-side code (Node.js). The concepts you're learning here transfer across the entire JavaScript ecosystem.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "",
          "script.js": "// expose your solution as window.solution = function(...) { };\n(window as any).solution = function(){ /* TODO */ };"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-1-dom-render-list",
    "title": "DOM render list",
    "description": "This is a comprehensive challenge: DOM render list. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like DOM render list represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-10-form-validation",
    "title": "Form validation",
    "description": "This is a comprehensive challenge: Form validation. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Form validation represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-11-stable-ids",
    "title": "Stable IDs",
    "description": "This is a comprehensive challenge: Stable IDs. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Stable IDs represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-12-accessibility-labels-roles",
    "title": "Accessibility labels/roles",
    "description": "This is a comprehensive challenge: Accessibility labels/roles. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Accessibility labels/roles represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-13-keyboard-shortcuts",
    "title": "Keyboard shortcuts",
    "description": "This is a comprehensive challenge: Keyboard shortcuts. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Keyboard shortcuts represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-14-undo-last-delete",
    "title": "Undo last delete",
    "description": "This is a comprehensive challenge: Undo last delete. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Undo last delete represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-15-bulk-clear-confirm",
    "title": "Bulk clear (confirm)",
    "description": "This is a comprehensive challenge: Bulk clear (confirm). You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Bulk clear (confirm) represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-16-totals-panel",
    "title": "Totals panel",
    "description": "This is a comprehensive challenge: Totals panel. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Totals panel represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-17-live-total-update",
    "title": "Live total update",
    "description": "This is a comprehensive challenge: Live total update. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Live total update represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-18-currency-input-mask",
    "title": "Currency input mask",
    "description": "This is a comprehensive challenge: Currency input mask. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Currency input mask represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-19-category-field",
    "title": "Category field",
    "description": "This is a comprehensive challenge: Category field. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Category field represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-2-add-item-form",
    "title": "Add item form",
    "description": "This is a comprehensive challenge: Add item form. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Add item form represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-20-date-field-sort",
    "title": "Date field + sort",
    "description": "This is a comprehensive challenge: Date field + sort. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Date field + sort represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-21-responsive-two-column",
    "title": "Responsive two-column",
    "description": "This is a comprehensive challenge: Responsive two-column. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Responsive two-column represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-22-toast-notifications",
    "title": "Toast notifications",
    "description": "This is a comprehensive challenge: Toast notifications. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Toast notifications represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-23-modal-confirm",
    "title": "Modal confirm",
    "description": "This is a comprehensive challenge: Modal confirm. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Modal confirm represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-24-loading-empty-error-visuals",
    "title": "Loading/Empty/Error visuals",
    "description": "This is a comprehensive challenge: Loading/Empty/Error visuals. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Loading/Empty/Error visuals represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-25-import-export-json",
    "title": "Import/Export JSON",
    "description": "This is a comprehensive challenge: Import/Export JSON. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Import/Export JSON represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-26-input-masking-refine",
    "title": "Input masking refine",
    "description": "This is a comprehensive challenge: Input masking refine. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Input masking refine represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-27-data-testids",
    "title": "Data-testids",
    "description": "This is a comprehensive challenge: Data-testids. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Data-testids represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-28-tabs-views",
    "title": "Tabs views",
    "description": "This is a comprehensive challenge: Tabs views. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Tabs views represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-29-stats-view-by-category",
    "title": "Stats view (by category)",
    "description": "This is a comprehensive challenge: Stats view (by category). You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Stats view (by category) represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-3-delete-item",
    "title": "Delete item",
    "description": "This is a comprehensive challenge: Delete item. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Delete item represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-30-ls-namespacing-v1-v2",
    "title": "LS namespacing v1→v2",
    "description": "This is a comprehensive challenge: LS namespacing v1→v2. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like LS namespacing v1→v2 represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-31-debounced-saves",
    "title": "Debounced saves",
    "description": "This is a comprehensive challenge: Debounced saves. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Debounced saves represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-32-print-view",
    "title": "Print view",
    "description": "This is a comprehensive challenge: Print view. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Print view represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-33-keyboard-nav-in-list",
    "title": "Keyboard nav in list",
    "description": "This is a comprehensive challenge: Keyboard nav in list. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Keyboard nav in list represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-34-a11y-audit-fixes",
    "title": "A11y audit fixes",
    "description": "This is a comprehensive challenge: A11y audit fixes. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like A11y audit fixes represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-35-calculator-keypad-grid",
    "title": "Calculator keypad grid",
    "description": "This is a comprehensive challenge: Calculator keypad grid. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Calculator keypad grid represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-36-calculator-input-logic",
    "title": "Calculator input logic",
    "description": "This is a comprehensive challenge: Calculator input logic. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Calculator input logic represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-37-calculator-evaluate",
    "title": "Calculator evaluate",
    "description": "This is a comprehensive challenge: Calculator evaluate. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Calculator evaluate represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-38-calculator-clear-del",
    "title": "Calculator clear/del",
    "description": "This is a comprehensive challenge: Calculator clear/del. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Calculator clear/del represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-39-memory-buttons",
    "title": "Memory buttons",
    "description": "This is a comprehensive challenge: Memory buttons. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Memory buttons represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-4-edit-item-inline",
    "title": "Edit item inline",
    "description": "This is a comprehensive challenge: Edit item inline. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Edit item inline represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-40-final-expense-tracker",
    "title": "Final Expense Tracker",
    "description": "This is a comprehensive challenge: Final Expense Tracker. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Final Expense Tracker represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-5-filter-items",
    "title": "Filter items",
    "description": "This is a comprehensive challenge: Filter items. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Filter items represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-6-sort-controls",
    "title": "Sort controls",
    "description": "This is a comprehensive challenge: Sort controls. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Sort controls represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-7-empty-state",
    "title": "Empty state",
    "description": "This is a comprehensive challenge: Empty state. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Empty state represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-8-persist-to-localstorage",
    "title": "Persist to localStorage",
    "description": "This is a comprehensive challenge: Persist to localStorage. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Persist to localStorage represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  },
  {
    "id": "l4-9-hydrate-from-localstorage",
    "title": "Hydrate from localStorage",
    "description": "This is a comprehensive challenge: Hydrate from localStorage. You'll combine everything you've learned - HTML for structure, CSS for styling, and JavaScript for interactivity. This is where it all comes together to build a complete, functional feature.\n\nReal-world web development is about integrating multiple technologies seamlessly. In professional work, you'll constantly switch between HTML, CSS, and JavaScript to build complete features. This challenge mirrors that real-world experience.\n\nYour task is to create a working implementation that demonstrates your understanding of all three core web technologies. Think about user experience, code organization, and how different parts of your code interact with each other.",
    "difficulty": 4,
    "category": "html, css, js",
    "scaffold": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "tests": [
      {
        "id": "body",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      },
      {
        "id": "style",
        "code": "!!document.querySelector('style, link[rel=stylesheet]')",
        "label": "Has element: style, link[rel=stylesheet]"
      },
      {
        "id": "boot",
        "code": "!!document.querySelector('body')",
        "label": "Has element: body"
      }
    ],
    "solution": {
      "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
      "style.css": "/* styles.css */",
      "script.js": "// main.js"
    },
    "realWorldContext": "Full-stack features like Hydrate from localStorage represent the type of work you'll do as a professional web developer. This is exactly how real applications are built - integrating HTML structure, CSS styling, and JavaScript interactivity.\n\nCompanies look for developers who can build complete features from start to finish. Whether you're building a todo app, a shopping cart, a dashboard, or a social media feed, you'll use exactly these skills. This is what \"shipping features\" means in the real world.\n\nThe combination of HTML, CSS, and JavaScript you're practicing here is the foundation of frontend engineering. Master these skills, and you'll be ready to work with modern frameworks like React, Vue, or Angular, which all build on these same fundamentals.",
    "alternativeSolutions": [
      {
        "label": "Minimal Solution",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A straightforward approach that meets all requirements. This solution focuses on simplicity and clarity, making it perfect for understanding the core concepts."
      },
      {
        "label": "Modern Approach",
        "files": {
          "index.html": "<!doctype html>\n<html lang=\"ja\">\n<head><meta charset=\"utf-8\"><title>Challenge</title></head>\n<body>\n  <!-- TODO -->\n</body></html>",
          "style.css": "/* styles.css */",
          "script.js": "// main.js"
        },
        "explanation": "A modern implementation using current best practices and efficient patterns. This approach demonstrates how professional developers would tackle this challenge in a real project, with attention to performance and maintainability."
      }
    ]
  }
]