// packages/database/prisma/schema.prisma
// Same as apps/web/prisma/schema.prisma - centralized version

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Concept {
  id             String    @id @default(cuid())
  name           String    @unique
  description    String?
  difficulty     Int       @default(1)
  prerequisites  String[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  tasks          Task[]
  progress       Progress[]
  
  @@index([difficulty])
}

model Task {
  id            String    @id @default(cuid())
  title         String
  description   String
  prompt        String    @db.Text
  difficulty    Int       @default(1)
  conceptIds    String[]
  concepts      Concept[] @relation(fields: [conceptIds], references: [id])
  prerequisites String[]
  scaffold      Json
  solution      Json
  tests         Json
  hints         Json
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  attempts      Attempt[]
  
  @@index([difficulty])
}

model Progress {
  id            String    @id @default(cuid())
  userId        String
  conceptId     String
  concept       Concept   @relation(fields: [conceptId], references: [id], onDelete: Cascade)
  mastery       Int       @default(800)
  attempts      Int       @default(0)
  successes     Int       @default(0)
  lastAttemptAt DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@unique([userId, conceptId])
  @@index([userId])
  @@index([conceptId])
}

model Attempt {
  id            String    @id @default(cuid())
  userId        String
  taskId        String
  task          Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  code          Json
  passed        Boolean
  passedTests   String[]
  failedTests   String[]
  hintsUsed     Int       @default(0)
  maxHintLevel  Int       @default(0)
  timeSpentMs   Int?
  createdAt     DateTime  @default(now())
  
  @@index([userId])
  @@index([taskId])
  @@index([createdAt])
}

model Dialog {
  id            String    @id @default(cuid())
  userId        String
  taskId        String?
  role          String
  content       String    @db.Text
  hintLevel     Int?
  createdAt     DateTime  @default(now())
  
  @@index([userId])
  @@index([taskId])
  @@index([createdAt])
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([email])
}
// -------- Agent & Orchestration --------
model Agent {
  id            String   @id @default(cuid())
  name          String   @unique
  version       String
  systemPrompt  String
  tools         Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Conversation {
  id            String   @id @default(cuid())
  agentId       String?
  agentVersion  String?
  studentId     String
  courseId      String
  createdAt     DateTime @default(now())
  messages      Message[]
  @@index([studentId, courseId])
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  role           String   // system | user | assistant | tool | summary
  text           String   @db.Text
  tokens         Int?
  toolCalls      Json?
  language       String?
  createdAt      DateTime @default(now())
  feedback       Feedback?
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  @@index([conversationId])
}

// -------- Long-term memory & knowledge --------
model Memory {
  id         String   @id @default(cuid())
  studentId  String
  courseId   String
  text       String   @db.Text
  source     String
  lastUsedAt DateTime @default(now())
  embedding  Bytes?   // upgrade to pgvector later
  @@index([studentId, courseId])
}

model KnowledgeDoc {
  id        String   @id @default(cuid())
  courseId  String
  lessonId  String?
  uri       String?
  text      String   @db.Text
  meta      Json?
  embedding Bytes?   // upgrade to pgvector later
  @@index([courseId])
}

// -------- Feedback & evals --------
model Feedback {
  id         String   @id @default(cuid())
  messageId  String   @unique
  rating     Int      // -1 | 0 | 1
  tags       String[]
  comment    String?
  createdAt  DateTime @default(now())
  message    Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model EvalSample {
  id         String   @id @default(cuid())
  input      String   @db.Text
  golden     String   @db.Text
  rubricId   String?
  createdAt  DateTime @default(now())
}

model EvalResult {
  id          String   @id @default(cuid())
  agentId     String
  agentVer    String
  sampleId    String
  score       Float
  metrics     Json
  createdAt   DateTime @default(now())
}
